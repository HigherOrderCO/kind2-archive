/// Applies a function to both sides of an equality proof.
///
/// This function takes a proof of equality between two values of type A and a function
/// from A to B, and produces a proof that the function applied to both sides of the
/// equality results in equal values of type B.
///
/// # Parameters
///
/// * `A` - The type of the original values being compared.
/// * `B` - The type of the values after applying the function.
/// * `a` - The first value of type A.
/// * `b` - The second value of type A.
///
/// # Inputs
///
/// * `f` - A function from A to B.
/// * `e` - A proof of equality between `a` and `b` of type A.
///
/// # Output
///
/// A proof that `(f a)` is equal to `(f b)` in type B.
///
/// # Example
///
/// If we have a proof that `x = y` and a function `f`, then `apply` gives us a proof that `f(x) = f(y)`.

use Equal/refl

apply <A: *> <B: *> <a: A> <b: A>
- f: A -> B
- e: (Equal A a b)
: (Equal B (f a) (f b))

match e {
  refl: ~λPλe(e (f e.a))
}: (Equal B (f e.a) (f e.b))
