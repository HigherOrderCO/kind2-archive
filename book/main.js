const App = (S_1) => null;
const App_new = (S_1) => (init_2) => (tick_3) => (draw_4) => (when_5) => (P_6) => (new_7) => new_7(init_2)(tick_3)(draw_4)(when_5);
const Bits = null;
const Bits_E = (P_1) => (O_2) => (I_3) => (E_4) => E_4;
const Bits_I = (tail_1) => (P_2) => (O_3) => (I_4) => (E_5) => I_4(tail_1);
const Bits_O = (tail_1) => (P_2) => (O_3) => (I_4) => (E_5) => O_3(tail_1);
const Bits_match = (P_1) => (o_2) => (i_3) => (e_4) => (b_5) => b_5(P_1)(o_2)(i_3)(e_4);
const Bits_reverse = (bits_1) => Bits_reverse_go(bits_1)(Bits_E);
const Bits_reverse_go = (bits_1) => (acc_2) => (() => { const bits_P_3 = null; return (() => { const bits_O_4 = (bits_tail_4) => Bits_reverse_go(bits_tail_4)(Bits_O(acc_2)); return (() => { const bits_I_5 = (bits_tail_5) => Bits_reverse_go(bits_tail_5)(Bits_I(acc_2)); return (() => { const bits_E_6 = acc_2; return Bits_match(bits_P_3)(bits_O_4)(bits_I_5)(bits_E_6)(bits_1); })(); })(); })(); })();
const Char = null;
const List = (T_1) => null;
const List_concat = (T_1) => (xs_2) => (ys_3) => (() => { const xs_P_4 = null; return (() => { const xs_cons_5 = (xs_head_5) => (xs_tail_6) => List_cons(null)(xs_head_5)(List_concat(null)(xs_tail_6)(ys_3)); return (() => { const xs_nil_6 = ys_3; return List_match(null)(xs_P_4)(xs_cons_5)(xs_nil_6)(xs_2); })(); })(); })();
const List_cons = (T_1) => (head_2) => (tail_3) => (P_4) => (cons_5) => (nil_6) => cons_5(head_2)(tail_3);
const List_flatten = (T_1) => (xss_2) => (() => { const xss_P_3 = null; return (() => { const xss_cons_4 = (xss_head_4) => (xss_tail_5) => List_concat(null)(xss_head_4)(List_flatten(null)(xss_tail_5)); return (() => { const xss_nil_5 = List_nil(null); return List_match(null)(xss_P_3)(xss_cons_4)(xss_nil_5)(xss_2); })(); })(); })();
const List_fold = (A_1) => (P_2) => (c_3) => (n_4) => (xs_5) => (() => { const xs_P_6 = null; return (() => { const xs_cons_7 = (xs_head_7) => (xs_tail_8) => c_3(xs_head_7)(List_fold(null)(P_2)(c_3)(n_4)(xs_tail_8)); return (() => { const xs_nil_8 = n_4; return List_match(null)(xs_P_6)(xs_cons_7)(xs_nil_8)(xs_5); })(); })(); })();
const List_map = (A_1) => (B_2) => (xs_3) => (fn_4) => (() => { const xs_P_5 = null; return (() => { const xs_cons_6 = (xs_head_6) => (xs_tail_7) => (() => { const head_8 = fn_4(xs_head_6); return (() => { const tail_9 = List_map(null)(null)(xs_tail_7)(fn_4); return List_cons(null)(head_8)(tail_9); })(); })(); return (() => { const xs_nil_7 = List_nil(null); return List_match(null)(xs_P_5)(xs_cons_6)(xs_nil_7)(xs_3); })(); })(); })();
const List_match = (A_1) => (P_2) => (c_3) => (n_4) => (xs_5) => xs_5(P_2)(c_3)(n_4);
const List_nil = (T_1) => (P_2) => (cons_3) => (nil_4) => nil_4;
const Nat = null;
const Nat_succ = (n_1) => (P_2) => (succ_3) => (zero_4) => succ_3(n_1);
const Nat_zero = (P_1) => (succ_2) => (zero_3) => zero_3;
const Planet = null;
const Planet_draw = (planet_1) => (() => { const planet_P_2 = null; return (() => { const planet_new_3 = (planet_pos_3) => (planet_vel_4) => (planet_rad_5) => (() => { const pos_6 = V2_div(planet_pos_3)(V2_new(1000)(1000)); return List_cons(null)(Shape_xshape(pos_6))(List_nil(null)); })(); return Planet_match(planet_P_2)(planet_new_3)(planet_1); })(); })();
const Planet_interact = (a_1) => (b_2) => (() => { const a_P_3 = null; return (() => { const a_new_4 = (a_pos_4) => (a_vel_5) => (a_rad_6) => (() => { const b_P_7 = null; return (() => { const b_new_8 = (b_pos_8) => (b_vel_9) => (b_rad_10) => (() => { const dist_11 = V2_sqr_dist(a_pos_4)(b_pos_8); return (() => { const force_12 = V2_sub(b_pos_8)(a_pos_4); return (() => { const force_13 = V2_mul(force_12)(V2_new(1000000)(1000000)); return (() => { const force_14 = V2_div(force_13)(V2_new(dist_11)(dist_11)); return (() => { const force_15 = V2_mul(force_14)(V2_new(a_rad_6)(a_rad_6)); return (() => { const force_16 = V2_div(force_15)(V2_new(b_rad_10)(b_rad_10)); return (() => { const b_vel_17 = V2_add(b_vel_9)(V2_neg(force_16)); return Planet_new(b_pos_8)(b_vel_17)(b_rad_10); })(); })(); })(); })(); })(); })(); })(); return Planet_match(b_P_7)(b_new_8)(b_2); })(); })(); return Planet_match(a_P_3)(a_new_4)(a_1); })(); })();
const Planet_interactions = (planets_1) => (others_2) => (() => { const planets_P_3 = null; return (() => { const planets_cons_4 = (planets_head_4) => (planets_tail_5) => (() => { const head_6 = planets_head_4; return (() => { const tail_7 = planets_tail_5; return (() => { const head_8 = List_fold(null)(null)(Planet_interact)(head_6)(others_2(tail_7)); return (() => { const tail_9 = Planet_interactions(tail_7)((k_9) => others_2(List_cons(null)(head_8)(k_9))); return List_cons(null)(head_8)(tail_9); })(); })(); })(); })(); return (() => { const planets_nil_5 = List_nil(null); return List_match(null)(planets_P_3)(planets_cons_4)(planets_nil_5)(planets_1); })(); })(); })();
const Planet_match = (P_1) => (n_2) => (p_3) => p_3(P_1)(n_2);
const Planet_new = (pos_1) => (vel_2) => (rad_3) => (P_4) => (new_5) => new_5(pos_1)(vel_2)(rad_3);
const Planet_tick = (planet_1) => (() => { const planet_P_2 = null; return (() => { const planet_new_3 = (planet_pos_3) => (planet_vel_4) => (planet_rad_5) => (() => { const pos_6 = V2_add(planet_pos_3)(planet_vel_4); return (() => { const vel_7 = planet_vel_4; return (() => { const rad_8 = planet_rad_5; return Planet_new(pos_6)(vel_7)(rad_8); })(); })(); })(); return Planet_match(planet_P_2)(planet_new_3)(planet_1); })(); })();
const QuadTree = (A_1) => null;
const QuadTree_draw = (A_1) => (qt_2) => (pos_3) => (rad_4) => (() => { const qt_P_5 = null; return (() => { const qt_node_6 = (qt_nw_6) => (qt_ne_7) => (qt_sw_8) => (qt_se_9) => (() => { const half_r_10 = Math.floor(rad_4 / 2); return (() => { const nw_pos_11 = V2_new(Math.floor(V2_get_x(pos_3) - half_r_10))(Math.floor(V2_get_y(pos_3) + half_r_10)); return (() => { const ne_pos_12 = V2_new(Math.floor(V2_get_x(pos_3) + half_r_10))(Math.floor(V2_get_y(pos_3) + half_r_10)); return (() => { const sw_pos_13 = V2_new(Math.floor(V2_get_x(pos_3) - half_r_10))(Math.floor(V2_get_y(pos_3) - half_r_10)); return (() => { const se_pos_14 = V2_new(Math.floor(V2_get_x(pos_3) + half_r_10))(Math.floor(V2_get_y(pos_3) - half_r_10)); return (() => { const nw_rec_15 = QuadTree_draw(A_1)(qt_nw_6)(nw_pos_11)(half_r_10); return (() => { const ne_rec_16 = QuadTree_draw(A_1)(qt_ne_7)(ne_pos_12)(half_r_10); return (() => { const sw_rec_17 = QuadTree_draw(A_1)(qt_sw_8)(sw_pos_13)(half_r_10); return (() => { const se_rec_18 = QuadTree_draw(A_1)(qt_se_9)(se_pos_14)(half_r_10); return (() => { const square_19 = QuadTree_draw_area(pos_3)(rad_4); return List_flatten(null)(List_cons(null)(square_19)(List_cons(null)(nw_rec_15)(List_cons(null)(ne_rec_16)(List_cons(null)(sw_rec_17)(List_cons(null)(se_rec_18)(List_nil(null))))))); })(); })(); })(); })(); })(); })(); })(); })(); })(); })(); return (() => { const qt_leaf_7 = (qt_xs_7) => QuadTree_draw_area(pos_3)(rad_4); return QuadTree_match(null)(qt_P_5)(qt_node_6)(qt_leaf_7)(qt_2); })(); })(); })();
const QuadTree_draw_area = (pos_1) => (rad_2) => (() => { const r_3 = rad_2; return (() => { const x_4 = V2_get_x(pos_1); return (() => { const y_5 = V2_get_y(pos_1); return (() => { const top_lft_6 = V2_new(Math.floor(x_4 - r_3))(Math.floor(y_5 + r_3)); return (() => { const top_rgt_7 = V2_new(Math.floor(x_4 + r_3))(Math.floor(y_5 + r_3)); return (() => { const bot_lft_8 = V2_new(Math.floor(x_4 - r_3))(Math.floor(y_5 - r_3)); return (() => { const bot_rgt_9 = V2_new(Math.floor(x_4 + r_3))(Math.floor(y_5 - r_3)); return (() => { const top_side_10 = Shape_line(top_lft_6)(top_rgt_7); return (() => { const rgt_side_11 = Shape_line(top_rgt_7)(bot_rgt_9); return (() => { const bot_side_12 = Shape_line(bot_rgt_9)(bot_lft_8); return (() => { const lft_side_13 = Shape_line(bot_lft_8)(top_lft_6); return List_cons(null)(top_side_10)(List_cons(null)(rgt_side_11)(List_cons(null)(bot_side_12)(List_cons(null)(lft_side_13)(List_nil(null))))); })(); })(); })(); })(); })(); })(); })(); })(); })(); })(); })();
const QuadTree_leaf = (A_1) => (xs_2) => (P_3) => (node_4) => (leaf_5) => leaf_5(xs_2);
const QuadTree_match = (A_1) => (P_2) => (n_3) => (l_4) => (t_5) => t_5(P_2)(n_3)(l_4);
const QuadTree_node = (A_1) => (nw_2) => (ne_3) => (sw_4) => (se_5) => (P_6) => (node_7) => (leaf_8) => node_7(nw_2)(ne_3)(sw_4)(se_5);
const QuadTree_set = (A_1) => (t_2) => (x_3) => (y_4) => (v_5) => (() => { const emp_6 = QuadTree_leaf(null)(List_nil(null)); return (() => { const t_P_7 = null; return (() => { const t_node_8 = (t_nw_8) => (t_ne_9) => (t_sw_10) => (t_se_11) => (() => { const x_P_12 = null; return (() => { const x_O_13 = (x_tail_13) => (() => { const y_P_14 = null; return (() => { const y_O_15 = (y_tail_15) => QuadTree_node(null)(QuadTree_set(null)(t_nw_8)(x_tail_13)(y_tail_15)(v_5))(t_ne_9)(t_sw_10)(t_se_11); return (() => { const y_I_16 = (y_tail_16) => QuadTree_node(null)(t_nw_8)(t_ne_9)(QuadTree_set(null)(t_sw_10)(x_tail_13)(y_tail_16)(v_5))(t_se_11); return (() => { const y_E_17 = emp_6; return Bits_match(y_P_14)(y_O_15)(y_I_16)(y_E_17)(y_4); })(); })(); })(); })(); return (() => { const x_I_14 = (x_tail_14) => (() => { const y_P_15 = null; return (() => { const y_O_16 = (y_tail_16) => QuadTree_node(null)(t_nw_8)(QuadTree_set(null)(t_ne_9)(x_tail_14)(y_tail_16)(v_5))(t_sw_10)(t_se_11); return (() => { const y_I_17 = (y_tail_17) => QuadTree_node(null)(t_nw_8)(t_ne_9)(t_sw_10)(QuadTree_set(null)(t_se_11)(x_tail_14)(y_tail_17)(v_5)); return (() => { const y_E_18 = emp_6; return Bits_match(y_P_15)(y_O_16)(y_I_17)(y_E_18)(y_4); })(); })(); })(); })(); return (() => { const x_E_15 = (() => { const y_P_15 = null; return (() => { const y_O_16 = (y_tail_16) => emp_6; return (() => { const y_I_17 = (y_tail_17) => emp_6; return (() => { const y_E_18 = emp_6; return Bits_match(y_P_15)(y_O_16)(y_I_17)(y_E_18)(y_4); })(); })(); })(); })(); return Bits_match(x_P_12)(x_O_13)(x_I_14)(x_E_15)(x_3); })(); })(); })(); })(); return (() => { const t_leaf_9 = (t_xs_9) => (() => { const x_P_10 = null; return (() => { const x_O_11 = (x_tail_11) => (() => { const y_P_12 = null; return (() => { const y_O_13 = (y_tail_13) => QuadTree_node(null)(QuadTree_set(null)(emp_6)(x_tail_11)(y_tail_13)(v_5))(emp_6)(emp_6)(emp_6); return (() => { const y_I_14 = (y_tail_14) => QuadTree_node(null)(emp_6)(emp_6)(QuadTree_set(null)(emp_6)(x_tail_11)(y_tail_14)(v_5))(emp_6); return (() => { const y_E_15 = emp_6; return Bits_match(y_P_12)(y_O_13)(y_I_14)(y_E_15)(y_4); })(); })(); })(); })(); return (() => { const x_I_12 = (x_tail_12) => (() => { const y_P_13 = null; return (() => { const y_O_14 = (y_tail_14) => QuadTree_node(null)(emp_6)(QuadTree_set(null)(emp_6)(x_tail_12)(y_tail_14)(v_5))(emp_6)(emp_6); return (() => { const y_I_15 = (y_tail_15) => QuadTree_node(null)(emp_6)(emp_6)(emp_6)(QuadTree_set(null)(emp_6)(x_tail_12)(y_tail_15)(v_5)); return (() => { const y_E_16 = emp_6; return Bits_match(y_P_13)(y_O_14)(y_I_15)(y_E_16)(y_4); })(); })(); })(); })(); return (() => { const x_E_13 = (() => { const y_P_13 = null; return (() => { const y_O_14 = (y_tail_14) => emp_6; return (() => { const y_I_15 = (y_tail_15) => emp_6; return (() => { const y_E_16 = QuadTree_leaf(null)(List_cons(null)(v_5)(t_xs_9)); return Bits_match(y_P_13)(y_O_14)(y_I_15)(y_E_16)(y_4); })(); })(); })(); })(); return Bits_match(x_P_10)(x_O_11)(x_I_12)(x_E_13)(x_3); })(); })(); })(); })(); return QuadTree_match(null)(t_P_7)(t_node_8)(t_leaf_9)(t_2); })(); })(); })(); })();
const Shape = null;
const Shape_circle = (pos_1) => (rad_2) => (P_3) => (line_4) => (circle_5) => (xshape_6) => circle_5(pos_1)(rad_2);
const Shape_line = (ini_1) => (end_2) => (P_3) => (line_4) => (circle_5) => (xshape_6) => line_4(ini_1)(end_2);
const Shape_xshape = (x_ini_1) => (P_2) => (line_3) => (circle_4) => (xshape_5) => xshape_5(x_ini_1);
const String = List(Char);
const String_cons = (head_1) => (tail_2) => (P_3) => (cons_4) => (nil_5) => cons_4(head_1)(tail_2);
const String_nil = (P_1) => (cons_2) => (nil_3) => nil_3;
const U48_to_bits = (d_1) => (n_2) => (() => { const d_3_1 = d_1; switch (d_3_1) { case 0: return Bits_E; default: return ((d_3_1 => (() => { const d_1_4 = d_3_1; return (() => { const tail_5 = U48_to_bits(Math.floor(d_1 - 1))(Math.floor(n_2 / 2)); return (() => { const bit_6 = Math.floor(n_2 % 2); return (() => { const bit_7_1 = bit_6; switch (bit_7_1) { case 0: return Bits_O(tail_5); default: return ((bit_7_1 => (() => { const bit_1_8 = bit_7_1; return Bits_I(tail_5); })())((bit_7_1) - 1)); } })(); })(); })(); })())((d_3_1) - 1)); } })();
const V2 = null;
const V2_add = (a_1) => (b_2) => (() => { const a_P_3 = null; return (() => { const a_new_4 = (a_x_4) => (a_y_5) => (() => { const b_P_6 = null; return (() => { const b_new_7 = (b_x_7) => (b_y_8) => V2_new(Math.floor(a_x_4 + b_x_7))(Math.floor(a_y_5 + b_y_8)); return V2_match(b_P_6)(b_new_7)(b_2); })(); })(); return V2_match(a_P_3)(a_new_4)(a_1); })(); })();
const V2_div = (a_1) => (b_2) => (() => { const a_P_3 = null; return (() => { const a_new_4 = (a_x_4) => (a_y_5) => (() => { const b_P_6 = null; return (() => { const b_new_7 = (b_x_7) => (b_y_8) => V2_new(Math.floor(a_x_4 / b_x_7))(Math.floor(a_y_5 / b_y_8)); return V2_match(b_P_6)(b_new_7)(b_2); })(); })(); return V2_match(a_P_3)(a_new_4)(a_1); })(); })();
const V2_get_x = (v_1) => (() => { const v_P_2 = null; return (() => { const v_new_3 = (v_x_3) => (v_y_4) => v_x_3; return V2_match(v_P_2)(v_new_3)(v_1); })(); })();
const V2_get_y = (v_1) => (() => { const v_P_2 = null; return (() => { const v_new_3 = (v_x_3) => (v_y_4) => v_y_4; return V2_match(v_P_2)(v_new_3)(v_1); })(); })();
const V2_match = (P_1) => (n_2) => (v_3) => v_3(P_1)(n_2);
const V2_mul = (a_1) => (b_2) => (() => { const a_P_3 = null; return (() => { const a_new_4 = (a_x_4) => (a_y_5) => (() => { const b_P_6 = null; return (() => { const b_new_7 = (b_x_7) => (b_y_8) => V2_new(Math.floor(a_x_4 * b_x_7))(Math.floor(a_y_5 * b_y_8)); return V2_match(b_P_6)(b_new_7)(b_2); })(); })(); return V2_match(a_P_3)(a_new_4)(a_1); })(); })();
const V2_neg = (v_1) => (() => { const v_P_2 = null; return (() => { const v_new_3 = (v_x_3) => (v_y_4) => V2_new(Math.floor(0 - v_x_3))(Math.floor(0 - v_y_4)); return V2_match(v_P_2)(v_new_3)(v_1); })(); })();
const V2_new = (x_1) => (y_2) => (P_3) => (new_4) => new_4(x_1)(y_2);
const V2_sqr_dist = (a_1) => (b_2) => (() => { const a_P_3 = null; return (() => { const a_new_4 = (a_x_4) => (a_y_5) => (() => { const b_P_6 = null; return (() => { const b_new_7 = (b_x_7) => (b_y_8) => (() => { const dx_9 = Math.floor(a_x_4 - b_x_7); return (() => { const dy_10 = Math.floor(a_y_5 - b_y_8); return Math.floor(Math.floor(dx_9 * dx_9) + Math.floor(dy_10 * dy_10)); })(); })(); return V2_match(b_P_6)(b_new_7)(b_2); })(); })(); return V2_match(a_P_3)(a_new_4)(a_1); })(); })();
const V2_sub = (a_1) => (b_2) => (() => { const a_P_3 = null; return (() => { const a_new_4 = (a_x_4) => (a_y_5) => (() => { const b_P_6 = null; return (() => { const b_new_7 = (b_x_7) => (b_y_8) => V2_new(Math.floor(a_x_4 - b_x_7))(Math.floor(a_y_5 - b_y_8)); return V2_match(b_P_6)(b_new_7)(b_2); })(); })(); return V2_match(a_P_3)(a_new_4)(a_1); })(); })();
const main = (() => { const init_1 = (() => { const sun_1 = Planet_new(V2_new(256000)(256000))(V2_new(0)(0))(20); return (() => { const moon_2 = Planet_new(V2_new(322000)(256000))(V2_new(0)(3100))(2); return List_cons(null)(sun_1)(List_cons(null)(moon_2)(List_nil(null))); })(); })(); return (() => { const tick_2 = (state_2) => (() => { const state_3 = List_map(null)(null)(state_2)(Planet_tick); return (() => { const state_4 = Planet_interactions(state_3)((x_4) => x_4); return state_4; })(); })(); return (() => { const draw_3 = (state_3) => (() => { const sun_pos_4 = (() => { const state_P_4 = (state_4) => V2; return (() => { const state_cons_5 = (state_head_5) => (state_tail_6) => (() => { const sun_7 = state_head_5; return (() => { const sun_P_8 = null; return (() => { const sun_new_9 = (sun_pos_9) => (sun_vel_10) => (sun_rad_11) => sun_pos_9; return Planet_match(sun_P_8)(sun_new_9)(sun_7); })(); })(); })(); return (() => { const state_nil_6 = V2_new(0)(0); return List_match(null)(state_P_4)(state_cons_5)(state_nil_6)(state_3); })(); })(); })(); return (() => { const qt_5 = QuadTree_leaf(null)(List_nil(null)); return (() => { const qt_6 = List_fold(null)(QuadTree(null))((p_6) => (qt_7) => (() => { const p_P_8 = null; return (() => { const p_new_9 = (p_pos_9) => (p_vel_10) => (p_rad_11) => (() => { const pp_12 = V2_sub(p_pos_9)(sun_pos_4); return (() => { const px_13 = Math.floor(Math.floor(V2_get_x(pp_12) / 1000) + 256); return (() => { const py_14 = Math.floor(512 - Math.floor(Math.floor(V2_get_y(pp_12) / 1000) + 256)); return (() => { const kx_15 = Bits_reverse(U48_to_bits(9)(px_13)); return (() => { const ky_16 = Bits_reverse(U48_to_bits(9)(py_14)); return (() => { const qt_17 = QuadTree_set(null)(qt_7)(kx_15)(ky_16)(42); return qt_17; })(); })(); })(); })(); })(); })(); return Planet_match(p_P_8)(p_new_9)(p_6); })(); })())(qt_5)(state_3); return (() => { const aa_7 = QuadTree_draw(null)(qt_6)(V2_new(256)(256))(256); return (() => { const pl_8 = (() => { const state_P_8 = (state_8) => List(Shape); return (() => { const state_cons_9 = (state_head_9) => (state_tail_10) => List_flatten(null)(List_map(null)(null)(state_3)((planet_11) => (() => { const planet_P_12 = null; return (() => { const planet_new_13 = (planet_pos_13) => (planet_vel_14) => (planet_rad_15) => (() => { const pos_16 = V2_sub(planet_pos_13)(sun_pos_4); return (() => { const pos_17 = V2_add(pos_16)(V2_new(256000)(256000)); return (() => { const vel_18 = planet_vel_14; return (() => { const rad_19 = planet_rad_15; return (() => { const pnt_20 = Planet_new(pos_17)(vel_18)(rad_19); return Planet_draw(pnt_20); })(); })(); })(); })(); })(); return Planet_match(planet_P_12)(planet_new_13)(planet_11); })(); })())); return (() => { const state_nil_10 = List_nil(null); return List_match(null)(state_P_8)(state_cons_9)(state_nil_10)(state_3); })(); })(); })(); return List_concat(null)(aa_7)(pl_8); })(); })(); })(); })(); })(); return (() => { const when_4 = (key_4) => (state_5) => state_5; return App_new(null)(init_1)(tick_2)(draw_3)(when_4); })(); })(); })(); })();

