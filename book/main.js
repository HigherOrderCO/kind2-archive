const App = (S_1) => null;
const App_new = (S_1) => (init_2) => (tick_3) => (draw_4) => (when_5) => (P_6) => (new_7) => new_7(init_2)(tick_3)(draw_4)(when_5);
const Board = null;
const Board_add = (board_1) => (pos_2) => (() => { const board_P_3 = null; return (() => { const board_new_4 = (board_entities_4) => (board_type_5) => (board_won_6) => (board_won_ini_7) => (board_won_end_8) => (() => { const board_won_P_9 = null; return (() => { const board_won_true_10 = board_1; return (() => { const board_won_false_11 = (() => { const new_type_11 = Board_type(board_type_5); return (() => { const line_12 = List_filter(null)((el_12) => U48_if(null)(Math.floor(Math.floor(V2_get_y(pos_2) !== Entity_posY(el_12)) || Math.floor(Entity_team(el_12) !== new_type_11)))(Bool_false)(Bool_true))(board_entities_4); return (() => { const col_13 = List_filter(null)((el_13) => U48_if(null)(Math.floor(Math.floor(V2_get_x(pos_2) !== Entity_posX(el_13)) || Math.floor(Entity_team(el_13) !== new_type_11)))(Bool_false)(Bool_true))(board_entities_4); return (() => { const line_length_14 = List_len(null)(line_12); return (() => { const col_length_15 = List_len(null)(col_13); return (() => { const use_first_16 = U48_if(null)(Math.floor(line_length_14 === 2))(line_12)(U48_if(null)(Math.floor(col_length_15 === 2))(col_13)(List_nil(null))); return (() => { const first_17 = List_head(null)(use_first_16); return (() => { const won_end_18 = (() => { const first_P_18 = (first_18) => V2; return (() => { const first_some_19 = (first_value_19) => Entity_v2(first_value_19); return (() => { const first_none_20 = V2_new(1)(1); return Maybe_match(null)(first_P_18)(first_some_19)(first_none_20)(first_17); })(); })(); })(); return (() => { const has_19 = List_find(null)((el_19) => U48_if(null)(Math.floor(Math.floor(V2_get_x(pos_2) === Entity_posX(el_19)) && Math.floor(V2_get_y(pos_2) === Entity_posY(el_19))))(Bool_true)(Bool_false))(board_entities_4); return U48_if(null)(Math.floor(Math.floor(line_length_14 === 2) || Math.floor(col_length_15 === 2)))(Board_new(List_concat(null)(board_entities_4)(List_cons(null)(Entity_new(pos_2)(new_type_11))(List_nil(null))))(new_type_11)(Bool_true)(pos_2)(won_end_18))((() => { const has_P_20 = null; return (() => { const has_some_21 = (has_value_21) => board_1; return (() => { const has_none_22 = Board_new(List_concat(null)(board_entities_4)(List_cons(null)(Entity_new(pos_2)(new_type_11))(List_nil(null))))(new_type_11)(Bool_false)(board_won_ini_7)(board_won_end_8); return Maybe_match(null)(has_P_20)(has_some_21)(has_none_22)(has_19); })(); })(); })()); })(); })(); })(); })(); })(); })(); })(); })(); })(); return Bool_match(board_won_P_9)(board_won_true_10)(board_won_false_11)(board_won_6); })(); })(); })(); return Board_match(board_P_3)(board_new_4)(board_1); })(); })();
const Board_draw = (board_1) => (() => { const board_P_2 = null; return (() => { const board_new_3 = (board_entities_3) => (board_type_4) => (board_won_5) => (board_won_ini_6) => (board_won_end_7) => (() => { const posIni_8 = V2_add(V2_mul(board_won_ini_6)(V2_new(170)(170)))(V2_new(Math.floor(170 / 2))(Math.floor(170 / 2))); return (() => { const posEnd_9 = V2_add(V2_mul(board_won_end_7)(V2_new(170)(170)))(V2_new(Math.floor(170 / 2))(Math.floor(170 / 2))); return (() => { const line_10 = Shape_line(posIni_8)(posEnd_9); return List_concat(null)(Bool_if(null)(board_won_5)(List_cons(null)(line_10)(List_nil(null)))(List_nil(null)))(List_concat(null)(List_map(null)(null)(board_entities_3)((e_11) => Entity_draw(e_11)))(List_cons(null)(Shape_line(V2_new(170)(0))(V2_new(170)(512)))(List_cons(null)(Shape_line(V2_new(340)(0))(V2_new(340)(512)))(List_cons(null)(Shape_line(V2_new(0)(170))(V2_new(512)(170)))(List_cons(null)(Shape_line(V2_new(0)(340))(V2_new(512)(340)))(List_nil(null))))))); })(); })(); })(); return Board_match(board_P_2)(board_new_3)(board_1); })(); })();
const Board_match = (B_1) => (n_2) => (b_3) => b_3(B_1)(n_2);
const Board_new = (entities_1) => (type_2) => (won_3) => (won_ini_4) => (won_end_5) => (P_6) => (new_7) => new_7(entities_1)(type_2)(won_3)(won_ini_4)(won_end_5);
const Board_type = (last_type_1) => U48_if(null)(Math.floor(last_type_1 === 0))(1)(0);
const Board_when = (x_1) => (y_2) => (state_3) => (() => { const state_P_4 = null; return (() => { const state_new_5 = (state_entities_5) => (state_type_6) => (state_won_7) => (state_won_ini_8) => (state_won_end_9) => U48_if(null)(Math.floor(Math.floor(x_1 < 170) && Math.floor(y_2 < 170)))(Board_add(state_3)(V2_new(0)(0)))(U48_if(null)(Math.floor(Math.floor(x_1 < 170) && Math.floor(Math.floor(y_2 < 340) && Math.floor(y_2 > 170))))(Board_add(state_3)(V2_new(0)(1)))(U48_if(null)(Math.floor(Math.floor(x_1 < 170) && Math.floor(Math.floor(y_2 < 512) && Math.floor(y_2 > 340))))(Board_add(state_3)(V2_new(0)(2)))(U48_if(null)(Math.floor(Math.floor(Math.floor(x_1 < 340) && Math.floor(x_1 > 170)) && Math.floor(y_2 < 170)))(Board_add(state_3)(V2_new(1)(0)))(U48_if(null)(Math.floor(Math.floor(Math.floor(x_1 < 340) && Math.floor(x_1 > 170)) && Math.floor(Math.floor(y_2 < 340) && Math.floor(y_2 > 170))))(Board_add(state_3)(V2_new(1)(1)))(U48_if(null)(Math.floor(Math.floor(Math.floor(x_1 < 340) && Math.floor(x_1 > 170)) && Math.floor(Math.floor(y_2 < 512) && Math.floor(y_2 > 340))))(Board_add(state_3)(V2_new(1)(2)))(U48_if(null)(Math.floor(Math.floor(Math.floor(x_1 < 512) && Math.floor(x_1 > 340)) && Math.floor(Math.floor(y_2 < 170) && Math.floor(y_2 > 0))))(Board_add(state_3)(V2_new(2)(0)))(U48_if(null)(Math.floor(Math.floor(Math.floor(x_1 < 512) && Math.floor(x_1 > 340)) && Math.floor(Math.floor(y_2 < 340) && Math.floor(y_2 > 170))))(Board_add(state_3)(V2_new(2)(1)))(U48_if(null)(Math.floor(Math.floor(Math.floor(x_1 < 512) && Math.floor(x_1 > 340)) && Math.floor(Math.floor(y_2 < 512) && Math.floor(y_2 > 340))))(Board_add(state_3)(V2_new(2)(2)))(state_3))))))))); return Board_match(state_P_4)(state_new_5)(state_3); })(); })();
const Bool = null;
const Bool_false = (P_1) => (t_2) => (f_3) => f_3;
const Bool_if = (P_1) => (b_2) => (t_3) => (f_4) => (() => { const b_P_5 = null; return (() => { const b_true_6 = t_3; return (() => { const b_false_7 = f_4; return Bool_match(b_P_5)(b_true_6)(b_false_7)(b_2); })(); })(); })();
const Bool_match = (P_1) => (t_2) => (f_3) => (b_4) => b_4(P_1)(t_2)(f_3);
const Bool_true = (P_1) => (t_2) => (f_3) => t_2;
const Char = null;
const Entity = null;
const Entity_draw = (entity_1) => (() => { const entity_P_2 = null; return (() => { const entity_new_3 = (entity_pos_3) => (entity_type_4) => (() => { const pos_5 = V2_add(V2_mul(entity_pos_3)(V2_new(170)(170)))(V2_new(Math.floor(170 / 2))(Math.floor(170 / 2))); return U48_if(null)(Math.floor(entity_type_4 === 0))(Shape_circle(pos_5)(35))(Shape_xshape(pos_5)); })(); return Entity_match(entity_P_2)(entity_new_3)(entity_1); })(); })();
const Entity_match = (E_1) => (n_2) => (e_3) => e_3(E_1)(n_2);
const Entity_new = (pos_1) => (type_2) => (P_3) => (new_4) => new_4(pos_1)(type_2);
const Entity_posX = (entity_1) => (() => { const entity_P_2 = null; return (() => { const entity_new_3 = (entity_pos_3) => (entity_type_4) => (() => { const entity_pos_P_5 = null; return (() => { const entity_pos_new_6 = (entity_pos_x_6) => (entity_pos_y_7) => entity_pos_x_6; return V2_match(entity_pos_P_5)(entity_pos_new_6)(entity_pos_3); })(); })(); return Entity_match(entity_P_2)(entity_new_3)(entity_1); })(); })();
const Entity_posY = (entity_1) => (() => { const entity_P_2 = null; return (() => { const entity_new_3 = (entity_pos_3) => (entity_type_4) => (() => { const entity_pos_P_5 = null; return (() => { const entity_pos_new_6 = (entity_pos_x_6) => (entity_pos_y_7) => entity_pos_y_7; return V2_match(entity_pos_P_5)(entity_pos_new_6)(entity_pos_3); })(); })(); return Entity_match(entity_P_2)(entity_new_3)(entity_1); })(); })();
const Entity_team = (entity_1) => (() => { const entity_P_2 = null; return (() => { const entity_new_3 = (entity_pos_3) => (entity_type_4) => entity_type_4; return Entity_match(entity_P_2)(entity_new_3)(entity_1); })(); })();
const Entity_v2 = (entity_1) => (() => { const entity_P_2 = null; return (() => { const entity_new_3 = (entity_pos_3) => (entity_type_4) => entity_pos_3; return Entity_match(entity_P_2)(entity_new_3)(entity_1); })(); })();
const List = (T_1) => null;
const List_concat = (T_1) => (xs_2) => (ys_3) => (() => { const xs_P_4 = null; return (() => { const xs_cons_5 = (xs_head_5) => (xs_tail_6) => List_cons(null)(xs_head_5)(List_concat(null)(xs_tail_6)(ys_3)); return (() => { const xs_nil_6 = ys_3; return List_match(null)(xs_P_4)(xs_cons_5)(xs_nil_6)(xs_2); })(); })(); })();
const List_cons = (T_1) => (head_2) => (tail_3) => (P_4) => (cons_5) => (nil_6) => cons_5(head_2)(tail_3);
const List_filter = (A_1) => (cond_2) => (list_3) => (() => { const list_P_4 = null; return (() => { const list_cons_5 = (list_head_5) => (list_tail_6) => (() => { const test_7 = cond_2(list_head_5); return (() => { const head_8 = (() => { const test_P_8 = (test_8) => null; return (() => { const test_true_9 = List_cons(null)(list_head_5); return (() => { const test_false_10 = (x_10) => x_10; return Bool_match(test_P_8)(test_true_9)(test_false_10)(test_7); })(); })(); })(); return (() => { const tail_9 = List_filter(null)(cond_2)(list_tail_6); return head_8(tail_9); })(); })(); })(); return (() => { const list_nil_6 = List_nil(null); return List_match(null)(list_P_4)(list_cons_5)(list_nil_6)(list_3); })(); })(); })();
const List_find = (A_1) => (fn_2) => (xs_3) => (() => { const xs_P_4 = null; return (() => { const xs_cons_5 = (xs_head_5) => (xs_tail_6) => (() => { const result_7 = fn_2(xs_head_5); return (() => { const result_P_8 = null; return (() => { const result_true_9 = Maybe_some(null)(xs_head_5); return (() => { const result_false_10 = List_find(null)(fn_2)(xs_tail_6); return Bool_match(result_P_8)(result_true_9)(result_false_10)(result_7); })(); })(); })(); })(); return (() => { const xs_nil_6 = Maybe_none(null); return List_match(null)(xs_P_4)(xs_cons_5)(xs_nil_6)(xs_3); })(); })(); })();
const List_head = (A_1) => (xs_2) => (() => { const xs_P_3 = null; return (() => { const xs_cons_4 = (xs_head_4) => (xs_tail_5) => Maybe_some(null)(xs_head_4); return (() => { const xs_nil_5 = Maybe_none(null); return List_match(null)(xs_P_3)(xs_cons_4)(xs_nil_5)(xs_2); })(); })(); })();
const List_len = (A_1) => (xs_2) => (() => { const xs_P_3 = null; return (() => { const xs_cons_4 = (xs_head_4) => (xs_tail_5) => Math.floor(1 + List_len(null)(xs_tail_5)); return (() => { const xs_nil_5 = 0; return List_match(null)(xs_P_3)(xs_cons_4)(xs_nil_5)(xs_2); })(); })(); })();
const List_map = (A_1) => (B_2) => (xs_3) => (fn_4) => (() => { const xs_P_5 = null; return (() => { const xs_cons_6 = (xs_head_6) => (xs_tail_7) => (() => { const head_8 = fn_4(xs_head_6); return (() => { const tail_9 = List_map(null)(null)(xs_tail_7)(fn_4); return List_cons(null)(head_8)(tail_9); })(); })(); return (() => { const xs_nil_7 = List_nil(null); return List_match(null)(xs_P_5)(xs_cons_6)(xs_nil_7)(xs_3); })(); })(); })();
const List_match = (A_1) => (P_2) => (c_3) => (n_4) => (xs_5) => xs_5(P_2)(c_3)(n_4);
const List_nil = (T_1) => (P_2) => (cons_3) => (nil_4) => nil_4;
const Maybe = (T_1) => null;
const Maybe_match = (A_1) => (P_2) => (s_3) => (n_4) => (ma_5) => ma_5(P_2)(s_3)(n_4);
const Maybe_none = (T_1) => (P_2) => (some_3) => (none_4) => none_4;
const Maybe_some = (T_1) => (value_2) => (P_3) => (some_4) => (none_5) => some_4(value_2);
const Nat = null;
const Nat_succ = (n_1) => (P_2) => (succ_3) => (zero_4) => succ_3(n_1);
const Nat_zero = (P_1) => (succ_2) => (zero_3) => zero_3;
const Shape = null;
const Shape_circle = (pos_1) => (rad_2) => (P_3) => (line_4) => (circle_5) => (xshape_6) => circle_5(pos_1)(rad_2);
const Shape_line = (ini_1) => (end_2) => (P_3) => (line_4) => (circle_5) => (xshape_6) => line_4(ini_1)(end_2);
const Shape_xshape = (x_ini_1) => (P_2) => (line_3) => (circle_4) => (xshape_5) => xshape_5(x_ini_1);
const String = List(Char);
const String_cons = (head_1) => (tail_2) => (P_3) => (cons_4) => (nil_5) => cons_4(head_1)(tail_2);
const String_nil = (P_1) => (cons_2) => (nil_3) => nil_3;
const U48_if = (P_1) => (x_2) => (t_3) => (f_4) => (() => { const x_5_1 = x_2; switch (x_5_1) { case 0: return f_4; default: return ((x_5_1 => (() => { const x_1_6 = x_5_1; return t_3; })())((x_5_1) - 1)); } })();
const V2 = null;
const V2_add = (a_1) => (b_2) => (() => { const a_P_3 = null; return (() => { const a_new_4 = (a_x_4) => (a_y_5) => (() => { const b_P_6 = null; return (() => { const b_new_7 = (b_x_7) => (b_y_8) => V2_new(Math.floor(a_x_4 + b_x_7))(Math.floor(a_y_5 + b_y_8)); return V2_match(b_P_6)(b_new_7)(b_2); })(); })(); return V2_match(a_P_3)(a_new_4)(a_1); })(); })();
const V2_get_x = (v_1) => (() => { const v_P_2 = null; return (() => { const v_new_3 = (v_x_3) => (v_y_4) => v_x_3; return V2_match(v_P_2)(v_new_3)(v_1); })(); })();
const V2_get_y = (v_1) => (() => { const v_P_2 = null; return (() => { const v_new_3 = (v_x_3) => (v_y_4) => v_y_4; return V2_match(v_P_2)(v_new_3)(v_1); })(); })();
const V2_match = (P_1) => (n_2) => (v_3) => v_3(P_1)(n_2);
const V2_mul = (a_1) => (b_2) => (() => { const a_P_3 = null; return (() => { const a_new_4 = (a_x_4) => (a_y_5) => (() => { const b_P_6 = null; return (() => { const b_new_7 = (b_x_7) => (b_y_8) => V2_new(Math.floor(a_x_4 * b_x_7))(Math.floor(a_y_5 * b_y_8)); return V2_match(b_P_6)(b_new_7)(b_2); })(); })(); return V2_match(a_P_3)(a_new_4)(a_1); })(); })();
const V2_new = (x_1) => (y_2) => (P_3) => (new_4) => new_4(x_1)(y_2);
const main = (() => { const init_1 = (() => { const board_1 = Board_new(List_nil(null))(0)(Bool_false)(V2_new(0)(0))(V2_new(0)(0)); return board_1; })(); return (() => { const tick_2 = (state_2) => state_2; return (() => { const draw_3 = (state_3) => (() => { const board_4 = (() => { const state_P_4 = (state_4) => Board; return (() => { const state_new_5 = (state_entities_5) => (state_type_6) => (state_won_7) => (state_won_ini_8) => (state_won_end_9) => state_3; return Board_match(state_P_4)(state_new_5)(state_3); })(); })(); return Board_draw(board_4); })(); return App_new(null)(init_1)(tick_2)(draw_3)(Board_when); })(); })(); })();

