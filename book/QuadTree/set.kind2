use QuadTree/{node,leaf}
use Bits/{O,I,E}
use Maybe/{some,none}

set <A>
- t: (QuadTree A)
- x: Bits
- y: Bits
- v: A
: (QuadTree A)

let emp = (QuadTree/leaf _ [])

match t {
  node:
    match x {
      O: match y {
        O: (QuadTree/node _ (set _ t.nw x.tail y.tail v) t.ne t.sw t.se)
        I: (QuadTree/node _ t.nw t.ne (set _ t.sw x.tail y.tail v) t.se)
        E: emp // unreachable
      }
      I: match y {
        O: (QuadTree/node _ t.nw (set _ t.ne x.tail y.tail v) t.sw t.se)
        I: (QuadTree/node _ t.nw t.ne t.sw (set _ t.se x.tail y.tail v))
        E: emp // unreachable
      }
      E: match y {
        O: emp // unreachable
        I: emp // unreachable
        E: emp // unreachable
      }
    }
  leaf:
    match x {
      O: match y {
        O: (QuadTree/node _ (set _ emp x.tail y.tail v) emp emp emp)
        I: (QuadTree/node _ emp emp (set _ emp x.tail y.tail v) emp)
        E: emp // unreachable
      }
      I: match y {
        O: (QuadTree/node _ emp (set _ emp x.tail y.tail v) emp emp)
        I: (QuadTree/node _ emp emp emp (set _ emp x.tail y.tail v))
        E: emp // unreachable
      }
      E: match y {
        O: emp // unreachable
        I: emp // unreachable
        E: (QuadTree/leaf _ (List/cons _ v t.xs)) // unreachable
      }
    }
}

