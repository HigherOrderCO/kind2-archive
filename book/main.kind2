use Bits/{O,I,E}
use Shape/{circle,line}

main: (App (List Planet))

//use init =
  //let sun   = (Planet/new (V2/new 256000 256000) (V2/new 0 0) 30)
  //let earth = (Planet/new (V2/new 450000 256000) (V2/new 0 2000) 20)
  //let moon  = (Planet/new (V2/new 350000 256000) (V2/new 0 2000) 3)
  //[ sun earth moon ]

// PROBLEM:
// the init list above was meant to represent the solar
// system, in a canvas with 512000 x 512000 pixels, and
// the sun in the center (256000 256000). sadly, it is
// wrong. the moon and earth are misplaced, the sizes
// are incorrect and the other planes are missing. this
// only needs to have earth's moon, no other moon and
// no other celestial body.
// this should be done in a way such that Neptune is around
// the edge of the canvas. pluto should be out because
// nobody likes pluto
// remember: every planet should be included in the
// segment from x=256000 to x=512000, and their radiuses
// should be from 1 to 20 (sun)
// implement the corrected init below:

use init =
  let sun     = (Planet/new (V2/new 256000 256000) (V2/new 0 0) 20)
  let mercury = (Planet/new (V2/new 286000 256000) (V2/new 0 3700) 3)
  let venus   = (Planet/new (V2/new 296000 256000) (V2/new 0 3500) 3)
  let earth   = (Planet/new (V2/new 320000 256000) (V2/new 0 3000) 3)
  let mars    = (Planet/new (V2/new 352000 256000) (V2/new 0 2400) 3)
  let jupiter = (Planet/new (V2/new 400000 256000) (V2/new 0 1300) 11)
  let saturn  = (Planet/new (V2/new 448000 256000) (V2/new 0 970) 9)
  let uranus  = (Planet/new (V2/new 488000 256000) (V2/new 0 680) 4)
  let neptune = (Planet/new (V2/new 510000 256000) (V2/new 0 540) 4)
  let moon    = (Planet/new (V2/new 322000 256000) (V2/new 0 3100) 2)
  [ sun mercury venus earth mars jupiter saturn uranus neptune moon ]

use tick = λstate
  let state = (List/map _ _ state Planet/tick)
  let state = (Planet/interactions state λx(x))
  state

// FIXME: ugly code just to center the camera around the sun
use draw = λstate

  // Gets the sun (first planet) position
  let sun_pos = match state {
    List/nil: (V2/new 0 0)
    List/cons: 
      let sun = state.head
      match sun {
        Planet/new: sun.pos
      }
  }: V2 // FIXME: why cant infer this?

  // Draws the QuadTree
  let qt = (QuadTree/leaf U48 [])
  let qt = (List/fold _ (QuadTree U48) λpλqt(match p {
    Planet/new:
      let pp = (V2/sub p.pos sun_pos)
      let px = (+ (/ (V2/get_x pp) 1000) 256)
      let py = (- 512 (+ (/ (V2/get_y pp) 1000) 256))
      let kx = (Bits/reverse (U48/to_bits 9 px))
      let ky = (Bits/reverse (U48/to_bits 9 py))
      let qt = (QuadTree/set _ qt kx ky 42)
      qt
  }) qt state)

  //let qt = (QuadTree/leaf U48 [])
  //let kx = (Bits/reverse (U48/to_bits 9 255))
  //let ky = (Bits/reverse (U48/to_bits 9 256))
  //let qt = (QuadTree/set _ qt kx ky 42)
  let aa = (QuadTree/draw _ qt (V2/new 256 256) 256)

  // Draws the planets
  let pl = match state {
    List/nil: [] // unreachable
    List/cons: (List/flatten _ (List/map _ _ state λplanet(
      match planet {
        Planet/new:
          let pos = (V2/sub planet.pos sun_pos)
          let pos = (V2/add pos (V2/new 256000 256000))
          let vel = planet.vel
          let rad = planet.rad
          let pnt = (Planet/new pos vel rad)
          (Planet/draw pnt)
      }
    )))
  }: (List Shape)

  (List/concat _ aa pl)
  //aa


//use draw = λstate
  //?draw
  //(QuadTree/draw t (V2/new 256 256) 256) 

use when = λkey λstate
  state
  //match state {
    //V2/new:
      //(U48/if _ (== key 'W') (V2/new state.x (- state.y 16))
      //(U48/if _ (== key 'S') (V2/new state.x (+ state.y 16))
      //(U48/if _ (== key 'A') (V2/new (- state.x 16) state.y)
      //(U48/if _ (== key 'D') (V2/new (+ state.x 16) state.y)
      //state))))
  //}

(App/new _ init tick draw when)










//Bend with types -> HVM -> WebGPU
