/// Concatenates two lists of the same type.
///
/// # Parameters
///
/// * `T` - The type of elements in both lists.
///
/// # Inputs
///
/// * `xs` - The first list to concatenate.
/// * `ys` - The second list to concatenate.
///
/// # Output
///
/// A new list containing all elements from `xs` followed by all elements from `ys`.

use List/{cons,nil}

concat <T>
- xs: (List T)
- ys: (List T)
: (List T)

match xs {
  cons: 
    // If `xs` is non-empty, add its head to the result and recurse on the tail
    (cons _ xs.head (concat _ xs.tail ys))
  nil: 
    // If `xs` is empty, return `ys`
    ys
}
