/// Applies a function to each element of a list, producing a new list.
///
/// # Type Parameters
///
/// * `A` - The type of elements in the input list.
/// * `B` - The type of elements in the output list.
///
/// # Parameters
///
/// * `xs` - The input list to be mapped over.
/// * `fn` - The function to apply to each element of the list.
///
/// # Returns
///
/// A new list where each element is the result of applying `fn` to the
/// corresponding element in the input list.

use List/{cons,nil}

map <A> <B>
- xs: (List A)
- fn: A -> B
: (List B)

match xs {
  cons:
    // Apply the function to the head of the list
    let head = (fn xs.head)
    // Recursively map over the tail of the list
    let tail = (List/map _ _ xs.tail fn)
    // Construct a new cons cell with the mapped head and tail
    (cons _ head tail)
  nil:
    // For an empty list, return an empty list of type B
    (nil _)
}