/// Maps a function over a list, transforming each element.
///
/// # Parameters
///
/// * `A` - The type of elements in the input list.
/// * `B` - The type of elements in the output list.
///
/// # Inputs
///
/// * `xs` - The input list of type (List A).
/// * `fn` - A function that transforms elements from type A to type B.
///
/// # Output
///
/// A new list of type (List B) with the function applied to each element.

use List/{cons,nil}

map <A> <B>
- xs: (List A)
- fn: A -> B
: (List B)

match xs {
  cons:
    let head = (fn xs.head)
    let tail = (List/map _ _ xs.tail fn)
    (cons _ head tail)
  nil:
    (nil _)
}
