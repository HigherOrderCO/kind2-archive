// Zips two lists into a list of pairs
// - A: The type of elements in the first list
// - B: The type of elements in the second list
// - as: The first input list
// - bs: The second input list
// = A list of pairs, where each pair contains elements from both input lists

use List/{cons,nil}

zip <A> <B>
- as: (List A)
- bs: (List B)
: (List (Pair A B))

match as {
  cons: match bs {
    cons: (cons _ (Pair/new _ _ as.head bs.head) (zip _ _ as.tail bs.tail))
    nil: (nil _)
  }
  nil: (nil _)
}
