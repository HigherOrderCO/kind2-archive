// Folds a binary tree
// - A: The type of values in the tree
// - P: The type of the result
// - nd: Function to apply at each node
// - lf: Value for leaf nodes
// - bm: The tree to fold
// = The result of folding the tree

use Tree/{node,leaf}

Tree/fold <A> (P: *)
- nd: A -> P -> P -> P
- lf: P
- bm: (Tree A)
: P

match bm with (nd: A -> P -> P -> P) (lf: P) {
  node: (nd bm.val (Tree/fold _ P nd lf bm.lft) (Tree/fold _ P nd lf bm.rgt))
  leaf: lf
}
